// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2021 20:34:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          six_bit_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module six_bit_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] Din;
// wires                                               
wire D1;
wire D2;
wire D3;
wire D4;
wire D5;
wire D6;
wire D7;
wire D8;
wire D9;
wire D10;
wire D11;
wire D12;
wire D13;
wire D14;
wire D15;
wire D16;
wire D17;
wire D18;
wire D19;
wire D20;
wire D21;
wire D22;
wire D23;
wire D24;
wire D25;
wire D26;
wire D27;
wire D28;
wire D29;
wire D30;
wire D31;
wire D32;
wire D33;
wire D34;
wire D35;
wire D36;
wire D37;
wire D38;
wire D39;
wire D40;
wire D41;
wire D42;
wire D43;
wire D44;
wire D45;
wire D46;
wire D47;
wire D48;
wire D49;
wire D50;
wire D51;
wire D52;
wire D53;
wire D54;
wire D55;
wire D56;
wire D57;
wire D58;
wire D59;
wire D60;
wire D61;
wire D62;
wire D63;
wire D64;

// assign statements (if any)                          
six_bit_decoder i1 (
// port map - connection between master ports and signals/registers   
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.D16(D16),
	.D17(D17),
	.D18(D18),
	.D19(D19),
	.D20(D20),
	.D21(D21),
	.D22(D22),
	.D23(D23),
	.D24(D24),
	.D25(D25),
	.D26(D26),
	.D27(D27),
	.D28(D28),
	.D29(D29),
	.D30(D30),
	.D31(D31),
	.D32(D32),
	.D33(D33),
	.D34(D34),
	.D35(D35),
	.D36(D36),
	.D37(D37),
	.D38(D38),
	.D39(D39),
	.D40(D40),
	.D41(D41),
	.D42(D42),
	.D43(D43),
	.D44(D44),
	.D45(D45),
	.D46(D46),
	.D47(D47),
	.D48(D48),
	.D49(D49),
	.D50(D50),
	.D51(D51),
	.D52(D52),
	.D53(D53),
	.D54(D54),
	.D55(D55),
	.D56(D56),
	.D57(D57),
	.D58(D58),
	.D59(D59),
	.D60(D60),
	.D61(D61),
	.D62(D62),
	.D63(D63),
	.D64(D64),
	.Din(Din)
);
initial 
begin 
#1000000 $finish;
end 
// Din[ 5 ]
initial
begin
	Din[5] = 1'b0;
	Din[5] = #20000 1'b1;
	Din[5] = #40000 1'b0;
end 
// Din[ 4 ]
initial
begin
	Din[4] = 1'b0;
	Din[4] = #20000 1'b1;
	Din[4] = #40000 1'b0;
end 
// Din[ 3 ]
initial
begin
	Din[3] = 1'b0;
	Din[3] = #130000 1'b1;
	Din[3] = #40000 1'b0;
end 
// Din[ 2 ]
initial
begin
	Din[2] = 1'b0;
	Din[2] = #130000 1'b1;
	Din[2] = #40000 1'b0;
end 
// Din[ 1 ]
initial
begin
	Din[1] = 1'b0;
	Din[1] = #20000 1'b1;
	Din[1] = #40000 1'b0;
end 
// Din[ 0 ]
initial
begin
	Din[0] = 1'b0;
end 
endmodule

