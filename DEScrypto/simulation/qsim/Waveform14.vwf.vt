// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2021 21:14:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          s_box_7
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module s_box_7_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst_n;
reg [5:0] sbox1_in;
// wires                                               
wire [3:0] sbox1_out;

// assign statements (if any)                          
s_box_7 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.rst_n(rst_n),
	.sbox1_in(sbox1_in),
	.sbox1_out(sbox1_out)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 
// sbox1_in[ 5 ]
initial
begin
	sbox1_in[5] = 1'b0;
	sbox1_in[5] = #30000 1'b1;
	sbox1_in[5] = #860000 1'b0;
end 
// sbox1_in[ 4 ]
initial
begin
	sbox1_in[4] = 1'b0;
	sbox1_in[4] = #640000 1'b1;
	sbox1_in[4] = #250000 1'b0;
end 
// sbox1_in[ 3 ]
initial
begin
	sbox1_in[3] = 1'b0;
	sbox1_in[3] = #130000 1'b1;
	sbox1_in[3] = #510000 1'b0;
end 
// sbox1_in[ 2 ]
initial
begin
	sbox1_in[2] = 1'b0;
	sbox1_in[2] = #30000 1'b1;
	sbox1_in[2] = #100000 1'b0;
	sbox1_in[2] = #230000 1'b1;
	sbox1_in[2] = #280000 1'b0;
end 
// sbox1_in[ 1 ]
initial
begin
	sbox1_in[1] = 1'b0;
	sbox1_in[1] = #30000 1'b1;
	sbox1_in[1] = #100000 1'b0;
	sbox1_in[1] = #120000 1'b1;
	sbox1_in[1] = #110000 1'b0;
	sbox1_in[1] = #140000 1'b1;
	sbox1_in[1] = #140000 1'b0;
	sbox1_in[1] = #170000 1'b1;
	sbox1_in[1] = #80000 1'b0;
end 
// sbox1_in[ 0 ]
initial
begin
	sbox1_in[0] = 1'b0;
	sbox1_in[0] = #30000 1'b1;
	sbox1_in[0] = #100000 1'b0;
	sbox1_in[0] = #60000 1'b1;
	sbox1_in[0] = #60000 1'b0;
	sbox1_in[0] = #50000 1'b1;
	sbox1_in[0] = #60000 1'b0;
	sbox1_in[0] = #60000 1'b1;
	sbox1_in[0] = #80000 1'b0;
	sbox1_in[0] = #70000 1'b1;
	sbox1_in[0] = #70000 1'b0;
	sbox1_in[0] = #90000 1'b1;
	sbox1_in[0] = #80000 1'b0;
end 
endmodule

